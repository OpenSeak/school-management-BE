generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model assignments {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  subject     String    @db.VarChar(255)
  class       String    @db.VarChar(50)
  section     String    @db.VarChar(10)
  assigned_by Int?
  due_date    DateTime  @db.Date
  file        String?
  teachers    teachers? @relation(fields: [assigned_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model attendance {
  id         Int       @id @default(autoincrement())
  student_id Int
  teacher_id Int
  class      Int
  section    String    @db.VarChar(10)
  date       DateTime  @db.Date
  status     String    @db.VarChar(10)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  students   students  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attendance_student")
  teachers   teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attendance_teacher")

  @@unique([student_id, date], map: "unique_student_date")
}

model calendar {
  id              Int               @id @default(autoincrement())
  month           String            @db.VarChar(50)
  calendar        String            @db.VarChar(255)
  year            Int?
  upcoming_events upcoming_events[]
}

model class_representatives {
  id         Int       @id @default(autoincrement())
  student_id Int?
  class      String    @db.VarChar(50)
  section    String    @db.VarChar(10)
  students   students? @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model class_routine {
  id         Int       @id @default(autoincrement())
  class      String    @db.VarChar(50)
  section    String    @db.VarChar(10)
  day        String    @db.VarChar(20)
  period     Int
  subject    String    @db.VarChar(255)
  teacher_id Int?
  teachers   teachers? @relation(fields: [teacher_id], references: [id], onUpdate: NoAction)
}

model class_teachers {
  id                                     Int       @id @default(autoincrement())
  class                                  String    @db.VarChar(10)
  section                                String    @db.VarChar(10)
  teacher_id                             Int
  class_representative_student_id        Int?
  second_class_representative_student_id Int?
  students                               students? @relation(fields: [class_representative_student_id], references: [id], onUpdate: NoAction)
  teachers                               teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model exams {
  id                  Int                   @id @default(autoincrement())
  class               String                @db.VarChar(50)
  section             String                @db.VarChar(10)
  subject             String                @db.VarChar(255)
  exam_date           DateTime              @db.Date
  exam_duration       String?               @db.VarChar(50)
  exam_type           String?               @db.VarChar(100)
  created_by          Int?
  teachers            teachers?             @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  performance         performance[]
  student_performance student_performance[]
}

model financecheckbook {
  id               Int      @id @default(autoincrement())
  month            String   @db.VarChar(50)
  income           Decimal  @db.Decimal(10, 2)
  expenses         Decimal  @db.Decimal(10, 2)
  total_due_amount Decimal? @db.Decimal
}

model finances {
  id             Int       @id @default(autoincrement())
  student_id     Int?
  total_fee      Decimal   @db.Decimal(10, 2)
  paid_amount    Decimal?  @default(0) @db.Decimal(10, 2)
  due_amount     Decimal?  @default(dbgenerated("(total_fee - paid_amount)")) @db.Decimal(10, 2)
  month          String    @db.VarChar(20)
  payment_status String?   @default("due") @db.VarChar(10)
  penalty        Decimal?  @default(0) @db.Decimal
  expenses       Decimal?  @default(0) @db.Decimal
  students       students? @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notes {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  subject    String    @db.VarChar(255)
  class      String    @db.VarChar(50)
  section    String    @db.VarChar(10)
  created_by Int?
  files      String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notices {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  created_by  Int?
  target_role String    @db.VarChar(50)
  users       users?    @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model performance {
  id                  Int                  @id @default(autoincrement())
  class               String               @db.VarChar(50)
  section             String               @db.VarChar(10)
  class_teacher       Int?
  class_performance   Int?
  exam_id             Int?
  exams               exams?               @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_exam_id")
  student_performance student_performance? @relation(fields: [class_performance], references: [id], onUpdate: NoAction)
  teachers            teachers?            @relation(fields: [class_teacher], references: [id], onUpdate: NoAction)
}

model student_performance {
  id             Int           @id @default(autoincrement())
  student_id     Int?
  exam_id        Int?
  marks_obtained Decimal       @db.Decimal(5, 2)
  total_marks    Decimal       @db.Decimal(5, 2)
  performance    performance[]
  exams          exams?        @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  students       students?     @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model student_routine {
  id              Int      @id @default(autoincrement())
  class           String   @db.VarChar(20)
  section         String   @db.VarChar(10)
  day             String   @db.VarChar(20)
  teacher_id      Int
  teacher_name    String   @db.VarChar(100)
  teacher_subject String?  @db.VarChar(100)
  time_slot       String   @db.VarChar(50)
  teachers        teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model students {
  id                    Int                     @id @default(autoincrement())
  user_id               Int?
  admission_number      String                  @unique @db.VarChar(50)
  class                 String                  @db.VarChar(50)
  section               String                  @db.VarChar(10)
  parent_name           String?                 @db.VarChar(255)
  parent_phone          String?                 @db.VarChar(20)
  parent_email          String?                 @db.VarChar(255)
  parent_work           String?
  parent_photo1         String?
  parent_photo2         String?
  guardian_photo        String?
  guardian_phone        String?                 @db.VarChar(15)
  roll_number           Int?
  attendance            attendance[]
  class_representatives class_representatives[]
  class_teachers        class_teachers[]
  finances              finances[]
  student_performance   student_performance[]
  users                 users?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teacher_routine {
  id         Int    @id @default(autoincrement())
  teacher_id Int
  day        String @db.VarChar(10)
  time_slot  String @db.VarChar(50)
  class      String @db.VarChar(10)
  section    String @db.VarChar(5)
  users      users  @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model teachers {
  id                  Int               @id @default(autoincrement())
  user_id             Int?
  specialised_subject String            @db.VarChar(255)
  assigned_class      String?           @db.VarChar(50)
  assigned_section    String?           @db.VarChar(10)
  assignments         assignments[]
  attendance          attendance[]
  class_routine       class_routine[]
  class_teachers      class_teachers[]
  exams               exams[]
  performance         performance[]
  student_routine     student_routine[]
  users               users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model upcoming_events {
  id          Int       @id @default(autoincrement())
  calendar_id Int?
  event_date  DateTime  @db.Date
  event_name  String    @db.VarChar(255)
  holiday     Boolean
  calendar    calendar? @relation(fields: [calendar_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                                     Int                 @id @default(autoincrement())
  name                                                   String              @db.VarChar(255)
  email                                                  String              @unique @db.VarChar(255)
  password                                               String              @db.VarChar(255)
  role                                                   String              @db.VarChar(50)
  phone                                                  String?             @db.VarChar(20)
  address                                                String?
  photo                                                  String?
  notes                                                  notes[]
  notices                                                notices[]
  students                                               students[]
  teacher_routine                                        teacher_routine[]
  teachers                                               teachers[]
  workroom_messages_workroom_messages_receiver_idTousers workroom_messages[] @relation("workroom_messages_receiver_idTousers")
  workroom_messages_workroom_messages_sender_idTousers   workroom_messages[] @relation("workroom_messages_sender_idTousers")
}

model workroom_messages {
  id                                         Int       @id @default(autoincrement())
  sender_id                                  Int?
  receiver_id                                Int?
  message                                    String
  sent_at                                    DateTime? @default(now()) @db.Timestamp(6)
  users_workroom_messages_receiver_idTousers users?    @relation("workroom_messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_workroom_messages_sender_idTousers   users?    @relation("workroom_messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
